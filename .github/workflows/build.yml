name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [ "opened", "synchronize", "reopened" ]

env:
  GRADLE_OPTS: '-Dorg.gradle.console=plain -Dorg.gradle.caching=true -Dsonar.gradle.skipCompile=true -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=512m"'

jobs:
  diktat:
    name: Code Analysis / diktat
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: marcospereira/kotlin-diktat-action@v1
        with:
          patterns: "src/main/kotlin src/test/kotlin '!src/main/kotlin/br/ufpe/liber/tasks/*.kt'"

  ktlint:
    name: Code Analysis / ktlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nbadal/action-ktlint-setup@v1
      - run: ktlint --version
      - run: ktlint --relative >> $GITHUB_STEP_SUMMARY

  detekt:
    name: Code Analysis / detekt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: detekt report
        uses: natiginfo/action-detekt-all@1.23.5
        with:
          args: |
            --report md:build/reports/detekt/detekt.md
      - name: Detekt Summary
        run: cat build/reports/detekt/detekt.md >> $GITHUB_STEP_SUMMARY

  stylelint:
    name: Code Analysis / stylelint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*" # latest lts
          check-latest: true
          cache: "npm"
      - name: npm install
        run: npm install
      - name: run stylelint
        run: npx stylelint src/main/**/*.scss

  eslint:
    name: Code Analysis / eslint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*" # latest lts
          check-latest: true
          cache: "npm"
      - name: npm install
        run: npm install
      - name: run eslint
        run: npx eslint .

  compile:
    name: Build / compile
    runs-on: ubuntu-latest
    needs:
      - diktat
      - detekt
      - ktlint
      - stylelint
      - eslint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Gradle and Java
        uses: ./.github/gradle-action
        with:
          # Allows this job to write to the cache every time it runs
          gradle-cache-read-only: false
      - name: Start Gradle Daemon
        run: ./gradlew --info
      - run: ./gradlew testClasses
      - name: Gradle Tasks Summary
        run: cat build/reports/build-times.md >> $GITHUB_STEP_SUMMARY

  esbuild-check:
    name: Test / Assets / pipeline
    runs-on: ubuntu-latest
    needs:
      - compile
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          check-latest: true
          cache: "npm"
      - run: node --version
      - run: npm install
      - name: Run assets pipeline
        run: |
          rm -rf ./build
          node assets-pipeline.mjs
          tree ./build

  test:
    name: Tests / test
    runs-on: ubuntu-latest
    needs:
      - compile
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Set up Gradle and Java
        uses: ./.github/gradle-action
      - name: Run tests
        run: ./gradlew check koverXmlReport
      - name: Gradle Tasks Summary
        run: cat build/reports/build-times.md >> $GITHUB_STEP_SUMMARY
      - name: Run SonarCloud Analysis
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          verbose: true

  build-docker:
    name: Package / Docker / build
    runs-on: ubuntu-latest
    needs:
      - compile
    steps:
      - uses: actions/checkout@v4
      - name: Docker / Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Docker / Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker / Get image name
        id: dockerImageName
        run: echo "dockerImageName=visaoholandesa:$(date '+%Y%m%d.%H%M.%S')" >> "$GITHUB_OUTPUT"
      - name: Docker / Create Image
        run: docker image build -t ${{ steps.dockerImageName.outputs.dockerImageName }} .
      - name: Docker / List images
        run: docker images
      # Adapted from https://docs.docker.com/build/ci/github-actions/test-before-push/
      - name: Docker / Test Image
        # From `docker run --help`:
        #   -d, --detach          Run container in background and print container ID
        #   --rm                  Automatically remove the container when it exits
        #   -p, --publish list    Publish a container's port(s) to the host
        run: |
          containerId=$(docker run -d --rm --publish 8080:8080 ${{ steps.dockerImageName.outputs.dockerImageName }})
          wget --retry-connrefused --tries=20 -nv --wait=1 --spider http://localhost:8080/
          docker container logs "$containerId"
          docker container stop "$containerId"

  good-to-merge:
    name: Good to merge
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - build-docker
    steps:
      - run: echo "This PR is ready to merge."

  check-if-prod:
    if: ${{ github.ref == 'refs/heads/main' }}
    name: Check if prod
    runs-on: ubuntu-latest
    needs:
      - compile
    steps:
      - run: echo "This is a push to main branch. Following with release and deploy"

  create-release:
    name: Creates a GitHub Release
    runs-on: ubuntu-latest
    concurrency:
      group: "create-releases"
      cancel-in-progress: true
    needs:
      - test
      - check-if-prod
      - build-docker
    # Docs:
    # https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
    permissions:
      contents: write
      packages: read # to preserve default permissions
    steps:
      - uses: actions/checkout@v4
      - name: Create Github Release
        env:
          GH_TOKEN: ${{ github.token }}
        # TAG_NAME value is trying to emulate semver to avoid release ordering issues.
        # See https://github.com/orgs/community/discussions/8226.
        run: |
          RELEASE_TITLE=$(date '+%Y %b %d %H:%M:%S')
          TAG_NAME="v$(date '+%Y%m%d.%H%M.%S')"
          gh release create "$TAG_NAME" --title "$RELEASE_TITLE" --generate-notes --latest
