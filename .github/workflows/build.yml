---
# DO NOT EDIT: this file is automatically synced from the template repository
# in https://github.com/Liber-UFPE/project-starter.
name: CI

# yamllint disable rule:truthy
on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [ "opened", "synchronize", "reopened" ]
# yamllint enable rule:truthy

env:
  REGISTRY: ghcr.io
  GRADLE_OPTS: >
    -Dorg.gradle.console=plain
    -Dorg.gradle.caching=true
    -Dsonar.gradle.skipCompile=true
    -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=512m"'

jobs:
  diktat:
    name: Code Analysis / diktat
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: marcospereira/kotlin-diktat-action@v1
        with:
          patterns: "src/main/kotlin src/test/kotlin '!src/main/kotlin/br/ufpe/liber/tasks/*.kt'"

  ktlint:
    name: Code Analysis / ktlint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: nbadal/action-ktlint-setup@v1
      - run: ktlint --version
      - run: ktlint --relative >> $GITHUB_STEP_SUMMARY

  detekt:
    name: Code Analysis / detekt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: detekt report
        uses: natiginfo/action-detekt-all@1.23.8
        with:
          args: --report md:build/reports/detekt/detekt.md
      - name: Detekt Summary
        run: cat build/reports/detekt/detekt.md >> $GITHUB_STEP_SUMMARY

  stylelint:
    name: Code Analysis / stylelint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"  # latest lts
          check-latest: true
          cache: "yarn"
      - run: yarn install
      - run: npx stylelint src/main/**/*.scss

  eslint:
    name: Code Analysis / eslint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"  # latest lts
          check-latest: true
          cache: "yarn"
      - run: yarn install
      - run: npx eslint .

  esbuild-check:
    name: Test / Assets / pipeline
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 20, 21 ]
    steps:
      - uses: actions/checkout@v5
      - run: corepack enable
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          check-latest: true
          cache: "yarn"
      - run: node --version
      - run: corepack enable
      - run: yarn install
      - name: Run assets pipeline
        run: |
          rm -rf ./build
          node assets-pipeline.mjs
          tree ./build

  gradle-wrapper-validation:
    name: Gradle / wrapper-validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: gradle/actions/wrapper-validation@v4

  compile:
    name: Build / compile
    runs-on: ubuntu-latest
    needs:
      - diktat
      - detekt
      - ktlint
      - stylelint
      - eslint
      - esbuild-check
      - gradle-wrapper-validation
    steps:
      - uses: actions/checkout@v5
      - run: corepack enable
      - name: Set up Gradle and Java
        uses: ./.github/gradle-action
        with:
          # Allows this job to write to the cache every time it runs
          gradle-cache-read-only: false
      - name: Start Gradle Daemon
        run: ./gradlew --info
      - run: ./gradlew testClasses

  dependency-review:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - compile
    steps:
      - uses: actions/checkout@v5
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high
          fail-on-scopes: runtime

  test:
    name: Tests / test
    runs-on: ubuntu-latest
    needs:
      - compile
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - run: corepack enable
      - name: Set up Gradle and Java
        uses: ./.github/gradle-action
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Run tests
        run: ./gradlew check koverXmlReport
      - name: Run SonarCloud Analysis
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar
      - name: Buildkite Test Analytics
        if: ${{ github.ref == 'refs/heads/main' && always() }}
        env:
          BUILDKITE_ANALYTICS_TOKEN: ${{ secrets.BUILDKITE_ANALYTICS_TOKEN }}
        run: |
          ./gradlew mergeJUnitReports
          COMMIT_MESSAGE=$(git log -n 1 --format="%s")
          curl -X POST --fail-with-body \
          -H "Authorization: Token token=$BUILDKITE_ANALYTICS_TOKEN" \
          -F "data=@build/test-results/junit.xml" \
          -F "format=junit" \
          -F "run_env[CI]=github_actions" \
          -F "run_env[key]=$GITHUB_ACTION-$GITHUB_RUN_NUMBER-$GITHUB_RUN_ATTEMPT" \
          -F "run_env[number]=$GITHUB_RUN_NUMBER" \
          -F "run_env[branch]=$GITHUB_REF" \
          -F "run_env[commit_sha]=$GITHUB_SHA" \
          -F "run_env[message]=$COMMIT_MESSAGE" \
          -F "run_env[url]=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
          https://analytics-api.buildkite.com/v1/uploads
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/test-results/junit.xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        continue-on-error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          verbose: true

  test-docker-image:
    name: Tests / docker image
    runs-on: ubuntu-latest
    needs:
      - compile
    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-buildx-action@v3
      - name: Docker / Get image name
        id: dockerImageName
        # yamllint disable rule:line-length
        # language="shell script"
        run: |
          echo "dockerImageName=${{ env.REGISTRY }}/${{ github.repository }}" | tr '[:upper:]' '[:lower:]'>> "$GITHUB_OUTPUT"
      - name: Create Image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true  # Load is a shorthand for --output=type=docker
          tags: ${{ steps.dockerImageName.outputs.dockerImageName }}:latest
          # See https://docs.docker.com/build/ci/github-actions/cache/#github-cache
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Test Image
        run: |
          containerId=$(docker run -d --rm --publish 8080:8080 ${{ steps.dockerImageName.outputs.dockerImageName }})
          wget --retry-connrefused --tries=20 -nv --wait=1 --spider http://localhost:8080/
          docker container logs "$containerId"
          docker container stop "$containerId"

  good-to-go:
    name: Good to Go
    runs-on: ubuntu-latest
    needs:
      - test
      - test-docker-image
      - dependency-review
    steps:
      - run: echo "Successful build. Good to proceed."
